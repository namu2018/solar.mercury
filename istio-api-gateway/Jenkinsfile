def label = "worker-${UUID.randomUUID().toString()}"
def buildNum = "${BUILD_NUMBER}"
def appName = "istio-api-gateway"
def registry  = "harbor.example.com/my-project"
def githubCredential = "github"
def registryCredential = "harbor-credential" 
def githubURL = "${MY_MERCURY_REPO_URL}"

podTemplate(label: label, containers: [
    containerTemplate(name: 'git', image: 'alpine/git', command: 'cat', ttyEnabled: true),
    containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true)
],
volumes: [
  hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
]) {
    node(label) {
        stage('Clone repository') {
            container('git') {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/master']],
                    userRemoteConfigs: [
                        [url: "$githubURL", credentialsId: "$githubCredential"]
                    ],
                ])
            }
        }
        stage('Build docker image') {
            container('docker') {
                withDockerRegistry([ credentialsId: "$registryCredential", url: "http://$registry" ]) {
                    sh 'pwd'
                    sh "ls ./$appName"
                    sh "docker build -t $registry/$appName:$buildNum -f ./$appName/Dockerfile ."
                }
            }
        }
         stage('Push docker image') {
            container('docker') {
                withDockerRegistry([ credentialsId: "$registryCredential", url: "http://$registry" ]) {
                    docker.image("$registry/$appName:$buildNum").push()
                }
            }
        }
    }
}
